---
---

<div class="bg-white rounded-lg shadow-lg p-4 sm:p-6">
  <div class="flex items-center justify-between mb-4 sm:mb-6">
    <h3 class="text-lg font-semibold text-gray-900" data-key="selectDates">Select Your Dates</h3>
    <div class="flex space-x-2">
      <button id="prevMonth" class="p-2 hover:bg-gray-100 rounded-lg transition-colors">
        <svg class="w-4 h-4 sm:w-5 sm:h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      <button id="nextMonth" class="p-2 hover:bg-gray-100 rounded-lg transition-colors">
        <svg class="w-4 h-4 sm:w-5 sm:h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
  </div>
  
  <div class="mb-4">
    <h4 id="currentMonth" class="text-center text-base sm:text-lg font-medium text-gray-900"></h4>
  </div>
  
  <div id="dayHeaders" class="grid grid-cols-7 gap-1 mb-2">
    <!-- Day headers will be populated by JavaScript -->
  </div>
  
  <div id="calendarDays" class="grid grid-cols-7 gap-1"></div>
  
  <div class="mt-4 sm:mt-6 flex flex-col sm:flex-row gap-4">
    <div class="flex-1">
      <label class="block text-sm font-medium text-gray-700 mb-1" data-key="checkin">Check-in</label>
      <input type="text" id="checkinDate" readonly class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 text-sm">
    </div>
    <div class="flex-1">
      <label class="block text-sm font-medium text-gray-700 mb-1" data-key="checkout">Check-out</label>
      <input type="text" id="checkoutDate" readonly class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 text-sm">
    </div>
  </div>
  
  <div class="mt-4 flex flex-wrap items-center justify-between text-xs sm:text-sm gap-2">
    <div class="flex flex-wrap items-center space-x-2 sm:space-x-4 gap-y-2">
      <div class="flex items-center">
        <div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
        <span class="text-gray-600" data-key="available">Available</span>
      </div>
      <div class="flex items-center">
        <div class="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
        <span class="text-gray-600" data-key="booked">Booked</span>
      </div>
      <div class="flex items-center">
        <div class="w-3 h-3 bg-primary-500 rounded-full mr-2"></div>
        <span class="text-gray-600" data-key="selected">Selected</span>
      </div>
    </div>
  </div>
</div>

<script>
  import { supabase } from '../lib/supabase';
  import { t, getCurrentLanguage } from '../lib/i18n';

  class Calendar {
    constructor() {
      this.currentDate = new Date();
      this.selectedDates = [];
      this.bookedDates = [];
      this.currentLanguage = getCurrentLanguage();
      this.init();
      this.loadBookedDates();
      this.updateTranslations();
    }
    
    async loadBookedDates() {
      try {
        const { data, error } = await supabase
          .from('bookings')
          .select('check_in, check_out')
          .eq('status', 'confirmed');

        if (error) throw error;

        this.bookedDates = [];
        data.forEach(booking => {
          const startDate = new Date(booking.check_in);
          const endDate = new Date(booking.check_out);
          
          for (let d = new Date(startDate); d < endDate; d.setDate(d.getDate() + 1)) {
            this.bookedDates.push(new Date(d).toDateString());
          }
        });

        this.render();
      } catch (error) {
        console.error('Error loading booked dates:', error);
        // Fallback to demo data
        this.generateBookedDates();
        this.render();
      }
    }
    
    generateBookedDates() {
      const booked = [];
      const today = new Date();
      
      // Generate some random booked dates for demo
      for (let i = 0; i < 15; i++) {
        const randomDate = new Date(today);
        randomDate.setDate(today.getDate() + Math.floor(Math.random() * 60));
        booked.push(randomDate.toDateString());
      }
      
      this.bookedDates = booked;
    }
    
    init() {
      this.render();
      this.bindEvents();
      
      // Listen for language changes
      window.addEventListener('languageChanged', () => {
        this.currentLanguage = getCurrentLanguage();
        this.updateTranslations();
        this.render();
      });
    }
    
    bindEvents() {
      document.getElementById('prevMonth')?.addEventListener('click', () => {
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        this.render();
      });
      
      document.getElementById('nextMonth')?.addEventListener('click', () => {
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        this.render();
      });
    }
    
    render() {
      this.renderHeader();
      this.renderDayHeaders();
      this.renderDays();
    }
    
    renderHeader() {
      const monthNames = this.getMonthNames();
      
      const headerElement = document.getElementById('currentMonth');
      if (headerElement) {
        headerElement.textContent = 
          `${monthNames[this.currentDate.getMonth()]} ${this.currentDate.getFullYear()}`;
      }
    }
    
    renderDayHeaders() {
      const dayHeaders = document.getElementById('dayHeaders');
      if (!dayHeaders) return;
      
      const shortDayNames = this.getShortDayNames();
      
      dayHeaders.innerHTML = '';
      shortDayNames.forEach(day => {
        const dayElement = document.createElement('div');
        dayElement.className = 'text-center text-xs sm:text-sm font-medium text-gray-500 py-2';
        dayElement.textContent = day;
        dayHeaders.appendChild(dayElement);
      });
    }
    
    renderDays() {
      const daysContainer = document.getElementById('calendarDays');
      if (!daysContainer) return;
      
      daysContainer.innerHTML = '';
      
      const firstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
      const lastDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
      const startDate = new Date(firstDay);
      startDate.setDate(startDate.getDate() - firstDay.getDay());
      
      for (let i = 0; i < 42; i++) {
        const date = new Date(startDate);
        date.setDate(startDate.getDate() + i);
        
        const dayElement = document.createElement('button');
        dayElement.className = this.getDayClasses(date);
        dayElement.textContent = date.getDate().toString();
        dayElement.disabled = date < new Date().setHours(0,0,0,0) || this.isBooked(date);
        
        if (!dayElement.disabled) {
          dayElement.addEventListener('click', () => this.selectDate(date));
        }
        
        daysContainer.appendChild(dayElement);
      }
    }
    
    getDayClasses(date) {
      let classes = 'w-8 h-8 sm:w-10 sm:h-10 text-xs sm:text-sm rounded-lg transition-all duration-200 ';
      
      const isCurrentMonth = date.getMonth() === this.currentDate.getMonth();
      const isToday = date.toDateString() === new Date().toDateString();
      const isSelected = this.selectedDates.some(d => d.toDateString() === date.toDateString());
      const isBooked = this.isBooked(date);
      const isPast = date < new Date().setHours(0,0,0,0);
      
      if (isPast || isBooked) {
        classes += 'text-gray-400 cursor-not-allowed ';
        if (isBooked) classes += 'bg-red-100 ';
      } else if (isSelected) {
        classes += 'bg-primary-500 text-white ';
      } else if (isToday) {
        classes += 'bg-primary-100 text-primary-700 font-semibold ';
      } else if (isCurrentMonth) {
        classes += 'text-gray-900 hover:bg-primary-50 ';
      } else {
        classes += 'text-gray-400 ';
      }
      
      return classes;
    }
    
    isBooked(date) {
      return this.bookedDates.includes(date.toDateString());
    }
    
    selectDate(date) {
      if (this.selectedDates.length === 0) {
        this.selectedDates = [date];
        const checkinInput = document.getElementById('checkinDate');
        if (checkinInput) {
          checkinInput.value = this.formatDate(date);
        }
      } else if (this.selectedDates.length === 1) {
        if (date > this.selectedDates[0]) {
          this.selectedDates.push(date);
          const checkoutInput = document.getElementById('checkoutDate');
          if (checkoutInput) {
            checkoutInput.value = this.formatDate(date);
          }
          
          // Dispatch custom event for booking integration
          window.dispatchEvent(new CustomEvent('datesSelected', {
            detail: {
              checkin: this.selectedDates[0],
              checkout: date
            }
          }));
        } else {
          this.selectedDates = [date];
          const checkinInput = document.getElementById('checkinDate');
          const checkoutInput = document.getElementById('checkoutDate');
          if (checkinInput) checkinInput.value = this.formatDate(date);
          if (checkoutInput) checkoutInput.value = '';
        }
      } else {
        this.selectedDates = [date];
        const checkinInput = document.getElementById('checkinDate');
        const checkoutInput = document.getElementById('checkoutDate');
        if (checkinInput) checkinInput.value = this.formatDate(date);
        if (checkoutInput) checkoutInput.value = '';
      }
      
      this.render();
    }
    
    formatDate(date) {
      const localeMap = {
        en: 'en-US',
        cs: 'cs-CZ',
        sk: 'sk-SK',
        pl: 'pl-PL',
        fr: 'fr-FR',
        it: 'it-IT',
        de: 'de-DE',
        uk: 'uk-UA',
        ru: 'ru-RU'
      };
      
      return date.toLocaleDateString(localeMap[this.currentLanguage] || 'en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    }
    
    getMonthNames() {
      return [
        t('january'), t('february'), t('march'), t('april'),
        t('may'), t('june'), t('july'), t('august'),
        t('september'), t('october'), t('november'), t('december')
      ];
    }
    
    getShortDayNames() {
      return [
        t('sun'), t('mon'), t('tue'), t('wed'),
        t('thu'), t('fri'), t('sat')
      ];
    }
    
    updateTranslations() {
      const elements = document.querySelectorAll('[data-key]');
      elements.forEach(element => {
        const key = element.getAttribute('data-key');
        if (key) {
          element.textContent = t(key);
        }
      });
    }
    
    getSelectedDates() {
      return {
        checkin: this.selectedDates[0] || null,
        checkout: this.selectedDates[1] || null
      };
    }
    
    clearSelection() {
      this.selectedDates = [];
      const checkinInput = document.getElementById('checkinDate');
      const checkoutInput = document.getElementById('checkoutDate');
      if (checkinInput) checkinInput.value = '';
      if (checkoutInput) checkoutInput.value = '';
      this.render();
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    window.calendar = new Calendar();
  });
</script>