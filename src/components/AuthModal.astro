---
---

<div id="authModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
  <div class="bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto transform transition-all">
    <div class="p-6 sm:p-8">
      <!-- Header -->
      <div class="flex items-center justify-between mb-6">
        <h2 id="authTitle" class="text-2xl font-bold text-gray-900">Sign In</h2>
        <button id="closeAuthModal" class="text-gray-400 hover:text-gray-600 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Auth Forms -->
      <div id="authForms">
        <!-- Sign In Form -->
        <form id="signInForm" class="space-y-4">
          <div>
            <label for="signInEmail" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
            <input
              type="email"
              id="signInEmail"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="your@email.com"
            />
          </div>
          <div>
            <label for="signInPassword" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input
              type="password"
              id="signInPassword"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="••••••••"
            />
          </div>
          <button
            type="submit"
            class="w-full bg-primary-600 hover:bg-primary-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors duration-200"
          >
            Sign In
          </button>
        </form>

        <!-- Sign Up Form -->
        <form id="signUpForm" class="space-y-4 hidden">
          <div>
            <label for="signUpName" class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
            <input
              type="text"
              id="signUpName"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="John Doe"
            />
          </div>
          <div>
            <label for="signUpEmail" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
            <input
              type="email"
              id="signUpEmail"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="your@email.com"
            />
          </div>
          <div>
            <label for="signUpPhone" class="block text-sm font-medium text-gray-700 mb-2">Phone (Optional)</label>
            <input
              type="tel"
              id="signUpPhone"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="+1 (555) 123-4567"
            />
          </div>
          <div>
            <label for="signUpPassword" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input
              type="password"
              id="signUpPassword"
              required
              minlength="6"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="••••••••"
            />
          </div>
          <button
            type="submit"
            class="w-full bg-primary-600 hover:bg-primary-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors duration-200"
          >
            Create Account
          </button>
        </form>
      </div>

      <!-- Toggle Forms -->
      <div class="mt-6 text-center">
        <button id="toggleAuth" class="text-primary-600 hover:text-primary-700 font-medium">
          Don't have an account? Sign up
        </button>
      </div>

      <!-- Loading State -->
      <div id="authLoading" class="hidden text-center py-4">
        <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary-600"></div>
        <p class="mt-2 text-gray-600">Processing...</p>
      </div>

      <!-- Error Message -->
      <div id="authError" class="hidden mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
        <p class="text-red-700 text-sm"></p>
      </div>
    </div>
  </div>
</div>

<script>
  import { supabase } from '../lib/supabase';

  class AuthModal {
    constructor() {
      this.modal = document.getElementById('authModal');
      this.signInForm = document.getElementById('signInForm');
      this.signUpForm = document.getElementById('signUpForm');
      this.toggleButton = document.getElementById('toggleAuth');
      this.closeButton = document.getElementById('closeAuthModal');
      this.title = document.getElementById('authTitle');
      this.loading = document.getElementById('authLoading');
      this.error = document.getElementById('authError');
      this.isSignUp = false;

      this.init();
    }

    init() {
      this.closeButton?.addEventListener('click', () => this.close());
      this.toggleButton?.addEventListener('click', () => this.toggle());
      this.signInForm?.addEventListener('submit', (e) => this.handleSignIn(e));
      this.signUpForm?.addEventListener('submit', (e) => this.handleSignUp(e));
      
      // Close on backdrop click
      this.modal?.addEventListener('click', (e) => {
        if (e.target === this.modal) this.close();
      });
    }

    open() {
      this.modal?.classList.remove('hidden');
      this.modal?.classList.add('flex');
      document.body.style.overflow = 'hidden';
    }

    close() {
      this.modal?.classList.add('hidden');
      this.modal?.classList.remove('flex');
      document.body.style.overflow = '';
      this.hideError();
    }

    toggle() {
      this.isSignUp = !this.isSignUp;
      
      if (this.isSignUp) {
        this.signInForm?.classList.add('hidden');
        this.signUpForm?.classList.remove('hidden');
        this.title.textContent = 'Create Account';
        this.toggleButton.textContent = 'Already have an account? Sign in';
      } else {
        this.signUpForm?.classList.add('hidden');
        this.signInForm?.classList.remove('hidden');
        this.title.textContent = 'Sign In';
        this.toggleButton.textContent = "Don't have an account? Sign up";
      }
      
      this.hideError();
    }

    showLoading() {
      this.loading?.classList.remove('hidden');
      document.getElementById('authForms')?.classList.add('hidden');
    }

    hideLoading() {
      this.loading?.classList.add('hidden');
      document.getElementById('authForms')?.classList.remove('hidden');
    }

    showError(message) {
      const errorElement = this.error?.querySelector('p');
      if (errorElement) {
        errorElement.textContent = message;
        this.error?.classList.remove('hidden');
      }
    }

    hideError() {
      this.error?.classList.add('hidden');
    }

    async handleSignIn(e) {
      e.preventDefault();
      this.showLoading();
      this.hideError();

      const email = document.getElementById('signInEmail').value;
      const password = document.getElementById('signInPassword').value;

      try {
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password,
        });

        if (error) throw error;

        this.close();
        window.location.reload();
      } catch (error) {
        this.showError(error.message);
      } finally {
        this.hideLoading();
      }
    }

    async handleSignUp(e) {
      e.preventDefault();
      this.showLoading();
      this.hideError();

      const email = document.getElementById('signUpEmail').value;
      const password = document.getElementById('signUpPassword').value;
      const fullName = document.getElementById('signUpName').value;
      const phone = document.getElementById('signUpPhone').value;

      try {
        const { data, error } = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: {
              full_name: fullName,
              phone: phone,
            },
          },
        });

        if (error) throw error;

        // Create profile
        if (data.user) {
          const { error: profileError } = await supabase
            .from('profiles')
            .insert({
              id: data.user.id,
              email: email,
              full_name: fullName,
              phone: phone,
            });

          if (profileError) console.error('Profile creation error:', profileError);
        }

        this.close();
        alert('Account created successfully! Please check your email to verify your account.');
      } catch (error) {
        this.showError(error.message);
      } finally {
        this.hideLoading();
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    window.authModal = new AuthModal();
  });
</script>