---
---

<div id="userMenu" class="relative hidden">
  <button 
    id="userMenuButton" 
    class="flex items-center space-x-2 px-3 py-2 text-sm text-gray-700 hover:text-primary-600 transition-colors"
    aria-label="User menu"
  >
    <div class="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
      <svg class="w-5 h-5 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7-7h14a7 7 0 00-7-7z"></path>
      </svg>
    </div>
    <span id="userName" class="hidden sm:inline font-medium">User</span>
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>
  
  <div 
    id="userMenuDropdown" 
    class="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 z-50 hidden"
  >
    <div class="py-2">
      <!-- User Info -->
      <div class="px-4 py-3 border-b border-gray-100">
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center">
            <svg class="w-6 h-6 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
          <div class="flex-1 min-w-0">
            <p id="userFullName" class="text-sm font-medium text-gray-900 truncate">User Name</p>
            <p id="userEmail" class="text-sm text-gray-500 truncate">user@example.com</p>
          </div>
        </div>
      </div>

      <!-- Menu Items -->
      <div class="py-1">
        <a href="/dashboard" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
          <span data-key="myProfile">My Profile</span>
        </a>
        
        <a href="/dashboard" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          <span data-key="myBookings">My Bookings</span>
        </a>
        
        <button id="editProfileBtn" class="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
          </svg>
          <span data-key="editProfile">Edit Profile</span>
        </button>
        
        <button id="changePasswordBtn" class="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"></path>
          </svg>
          <span data-key="changePassword">Change Password</span>
        </button>
      </div>

      <!-- Divider -->
      <div class="border-t border-gray-100 my-1"></div>

      <!-- Sign Out -->
      <button id="signOutBtn" class="w-full flex items-center px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors">
        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
        </svg>
        <span data-key="signOut">Sign Out</span>
      </button>
    </div>
  </div>
</div>

<script>
  import { supabase } from '../lib/supabase';
  import { t } from '../lib/i18n';

  class UserMenu {
    constructor() {
      this.button = document.getElementById('userMenuButton');
      this.dropdown = document.getElementById('userMenuDropdown');
      this.userMenu = document.getElementById('userMenu');
      this.user = null;
      
      this.init();
    }

    async init() {
      await this.checkAuth();
      this.bindEvents();
      this.updateTranslations();

      // Listen for authentication events
      window.addEventListener('userAuthenticated', (e) => {
        this.updateUserInfo(e.detail.user);
        this.show();
      });

      // Listen for language changes
      window.addEventListener('languageChanged', () => {
        this.updateTranslations();
      });
    }

    async checkAuth() {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          this.user = session.user;
          await this.loadUserProfile();
          this.show();
        } else {
          this.hide();
        }
      } catch (error) {
        console.error('Auth check error:', error);
        this.hide();
      }
    }

    async loadUserProfile() {
      if (!this.user) return;

      try {
        // Load profile data - remove .single() to handle missing profiles gracefully
        const { data: profiles } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', this.user.id);

        const profile = profiles?.[0]; // Get first profile or undefined if none exists

        if (profile) {
          this.updateUserInfo({ ...this.user, profile });
        } else {
          this.updateUserInfo(this.user);
        }
      } catch (error) {
        console.error('Error loading profile:', error);
        this.updateUserInfo(this.user);
      }
    }

    bindEvents() {
      this.button?.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleDropdown();
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', () => {
        this.closeDropdown();
      });

      // Menu item events
      document.getElementById('editProfileBtn')?.addEventListener('click', () => {
        this.openEditProfile();
      });

      document.getElementById('changePasswordBtn')?.addEventListener('click', () => {
        this.openChangePassword();
      });

      document.getElementById('signOutBtn')?.addEventListener('click', () => {
        this.signOut();
      });
    }

    show() {
      this.userMenu?.classList.remove('hidden');
    }

    hide() {
      this.userMenu?.classList.add('hidden');
    }

    toggleDropdown() {
      if (this.dropdown?.classList.contains('hidden')) {
        this.openDropdown();
      } else {
        this.closeDropdown();
      }
    }

    openDropdown() {
      this.dropdown?.classList.remove('hidden');
    }

    closeDropdown() {
      this.dropdown?.classList.add('hidden');
    }

    updateUserInfo(user) {
      this.user = user;
      
      const userName = document.getElementById('userName');
      const userFullName = document.getElementById('userFullName');
      const userEmail = document.getElementById('userEmail');

      const displayName = user.profile?.full_name || 
                         user.user_metadata?.full_name || 
                         user.email?.split('@')[0] || 
                         'User';

      if (userName) userName.textContent = displayName;
      if (userFullName) userFullName.textContent = displayName;
      if (userEmail) userEmail.textContent = user.email || '';
    }

    openEditProfile() {
      this.closeDropdown();
      
      if (window.profileModal) {
        window.profileModal.open(this.user);
      } else {
        // Fallback to dashboard
        window.location.href = '/dashboard';
      }
    }

    openChangePassword() {
      this.closeDropdown();
      
      if (window.passwordModal) {
        window.passwordModal.open();
      } else {
        // Fallback to password reset
        if (window.authModal) {
          window.authModal.open('forgotPassword');
        }
      }
    }

    async signOut() {
      this.closeDropdown();
      
      try {
        const { error } = await supabase.auth.signOut();
        if (error) throw error;

        // Clear any stored data
        localStorage.removeItem('rememberMe');
        
        // Hide user menu
        this.hide();
        
        // Redirect to home page
        window.location.href = '/';
        
      } catch (error) {
        console.error('Sign out error:', error);
        alert(t('signOutError') || 'Error signing out. Please try again.');
      }
    }

    updateTranslations() {
      const elements = document.querySelectorAll('[data-key]');
      elements.forEach(element => {
        const key = element.getAttribute('data-key');
        if (key) {
          element.textContent = t(key);
        }
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    window.userMenu = new UserMenu();
  });
</script>