---
---

<div id="passwordModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
  <div class="bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto transform transition-all">
    <div class="p-6 sm:p-8">
      <!-- Header -->
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-2xl font-bold text-gray-900" data-key="changePassword">Change Password</h2>
        <button id="closePasswordModal" class="text-gray-400 hover:text-gray-600 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Password Form -->
      <form id="passwordForm" class="space-y-4">
        <div>
          <label for="currentPassword" class="block text-sm font-medium text-gray-700 mb-2" data-key="currentPassword">Current Password</label>
          <div class="relative">
            <input
              type="password"
              id="currentPassword"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors pr-12"
              placeholder="••••••••"
            />
            <button
              type="button"
              id="toggleCurrentPassword"
              class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <div>
          <label for="newPassword" class="block text-sm font-medium text-gray-700 mb-2" data-key="newPassword">New Password</label>
          <div class="relative">
            <input
              type="password"
              id="newPassword"
              required
              minlength="6"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors pr-12"
              placeholder="••••••••"
            />
            <button
              type="button"
              id="toggleNewPassword"
              class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
            </button>
          </div>
          <div class="mt-1">
            <div id="newPasswordStrength" class="text-xs text-gray-500">
              <span data-key="passwordRequirements">Password must be at least 6 characters</span>
            </div>
          </div>
        </div>
        
        <div>
          <label for="confirmNewPassword" class="block text-sm font-medium text-gray-700 mb-2" data-key="confirmNewPassword">Confirm New Password</label>
          <div class="relative">
            <input
              type="password"
              id="confirmNewPassword"
              required
              minlength="6"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors pr-12"
              placeholder="••••••••"
            />
            <button
              type="button"
              id="toggleConfirmNewPassword"
              class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <button
          type="submit"
          class="w-full bg-primary-600 hover:bg-primary-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors duration-200"
          data-key="updatePassword"
        >
          Update Password
        </button>
      </form>

      <!-- Loading State -->
      <div id="passwordLoading" class="hidden text-center py-4">
        <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary-600"></div>
        <p class="mt-2 text-gray-600" data-key="updating">Updating...</p>
      </div>

      <!-- Success Message -->
      <div id="passwordSuccess" class="hidden mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <p class="text-green-700 text-sm" data-key="passwordUpdated">Password updated successfully!</p>
        </div>
      </div>

      <!-- Error Message -->
      <div id="passwordError" class="hidden mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p class="text-red-700 text-sm"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { supabase } from '../lib/supabase';
  import { t } from '../lib/i18n';

  class PasswordModal {
    constructor() {
      this.modal = document.getElementById('passwordModal');
      this.form = document.getElementById('passwordForm');
      this.closeButton = document.getElementById('closePasswordModal');
      this.loading = document.getElementById('passwordLoading');
      this.success = document.getElementById('passwordSuccess');
      this.error = document.getElementById('passwordError');

      this.init();
      this.updateTranslations();
    }

    init() {
      this.closeButton?.addEventListener('click', () => this.close());
      this.form?.addEventListener('submit', (e) => this.handleSubmit(e));
      
      // Password visibility toggles
      this.setupPasswordToggle('toggleCurrentPassword', 'currentPassword');
      this.setupPasswordToggle('toggleNewPassword', 'newPassword');
      this.setupPasswordToggle('toggleConfirmNewPassword', 'confirmNewPassword');
      
      // Password validation
      document.getElementById('newPassword')?.addEventListener('input', (e) => this.validatePassword(e.target.value));
      document.getElementById('confirmNewPassword')?.addEventListener('input', () => this.validatePasswordMatch());
      
      // Close on backdrop click
      this.modal?.addEventListener('click', (e) => {
        if (e.target === this.modal) this.close();
      });

      // Listen for language changes
      window.addEventListener('languageChanged', () => {
        this.updateTranslations();
      });
    }

    setupPasswordToggle(buttonId, inputId) {
      const button = document.getElementById(buttonId);
      const input = document.getElementById(inputId);
      
      if (button && input) {
        button.addEventListener('click', () => {
          const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
          input.setAttribute('type', type);
          
          // Update icon
          const icon = button.querySelector('svg');
          if (type === 'text') {
            icon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
            `;
          } else {
            icon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            `;
          }
        });
      }
    }

    validatePassword(password) {
      const strengthElement = document.getElementById('newPasswordStrength');
      if (!strengthElement) return;

      let strength = 0;
      let feedback = [];

      if (password.length >= 6) strength++;
      else feedback.push(t('passwordLength') || 'At least 6 characters');

      if (/[A-Z]/.test(password)) strength++;
      else feedback.push(t('passwordUppercase') || 'One uppercase letter');

      if (/[a-z]/.test(password)) strength++;
      else feedback.push(t('passwordLowercase') || 'One lowercase letter');

      if (/\d/.test(password)) strength++;
      else feedback.push(t('passwordNumber') || 'One number');

      if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength++;
      else feedback.push(t('passwordSpecial') || 'One special character');

      const colors = ['text-red-500', 'text-orange-500', 'text-yellow-500', 'text-blue-500', 'text-green-500'];
      const labels = [t('veryWeak') || 'Very Weak', t('weak') || 'Weak', t('fair') || 'Fair', t('good') || 'Good', t('strong') || 'Strong'];

      strengthElement.className = `text-xs ${colors[Math.min(strength, 4)]}`;
      
      if (password.length === 0) {
        strengthElement.textContent = t('passwordRequirements') || 'Password must be at least 6 characters';
        strengthElement.className = 'text-xs text-gray-500';
      } else if (feedback.length > 0) {
        strengthElement.textContent = `${labels[strength]} - ${t('missing') || 'Missing'}: ${feedback.join(', ')}`;
      } else {
        strengthElement.textContent = `${labels[strength]} ${t('password') || 'password'}`;
      }
    }

    validatePasswordMatch() {
      const newPassword = document.getElementById('newPassword')?.value;
      const confirmPassword = document.getElementById('confirmNewPassword')?.value;
      const confirmInput = document.getElementById('confirmNewPassword');

      if (confirmPassword && newPassword !== confirmPassword) {
        confirmInput?.setCustomValidity(t('passwordsDoNotMatch') || 'Passwords do not match');
        confirmInput?.classList.add('border-red-500');
      } else {
        confirmInput?.setCustomValidity('');
        confirmInput?.classList.remove('border-red-500');
      }
    }

    open() {
      this.modal?.classList.remove('hidden');
      this.modal?.classList.add('flex');
      document.body.style.overflow = 'hidden';
      this.hideMessages();
      this.form?.reset();
    }

    close() {
      this.modal?.classList.add('hidden');
      this.modal?.classList.remove('flex');
      document.body.style.overflow = '';
      this.hideMessages();
      this.form?.reset();
    }

    showLoading() {
      this.loading?.classList.remove('hidden');
      this.form?.classList.add('hidden');
    }

    hideLoading() {
      this.loading?.classList.add('hidden');
      this.form?.classList.remove('hidden');
    }

    showSuccess() {
      this.success?.classList.remove('hidden');
    }

    showError(message) {
      const errorElement = this.error?.querySelector('p');
      if (errorElement) {
        errorElement.textContent = message;
        this.error?.classList.remove('hidden');
      }
    }

    hideMessages() {
      this.success?.classList.add('hidden');
      this.error?.classList.add('hidden');
    }

    async handleSubmit(e) {
      e.preventDefault();
      this.showLoading();
      this.hideMessages();

      const currentPassword = document.getElementById('currentPassword')?.value;
      const newPassword = document.getElementById('newPassword')?.value;
      const confirmPassword = document.getElementById('confirmNewPassword')?.value;

      // Validate passwords match
      if (newPassword !== confirmPassword) {
        this.showError(t('passwordsDoNotMatch') || 'Passwords do not match');
        this.hideLoading();
        return;
      }

      try {
        // First, verify current password by attempting to sign in
        const { data: { user } } = await supabase.auth.getUser();
        if (!user?.email) {
          throw new Error('User not found');
        }

        // Attempt to sign in with current password to verify it
        const { error: signInError } = await supabase.auth.signInWithPassword({
          email: user.email,
          password: currentPassword,
        });

        if (signInError) {
          throw new Error(t('incorrectCurrentPassword') || 'Current password is incorrect');
        }

        // Update password
        const { error: updateError } = await supabase.auth.updateUser({
          password: newPassword
        });

        if (updateError) throw updateError;

        this.showSuccess();
        
        setTimeout(() => {
          this.close();
        }, 2000);

      } catch (error) {
        console.error('Password update error:', error);
        this.showError(error.message || t('errorUpdatingPassword') || 'Error updating password');
      } finally {
        this.hideLoading();
      }
    }

    updateTranslations() {
      const elements = document.querySelectorAll('[data-key]');
      elements.forEach(element => {
        const key = element.getAttribute('data-key');
        if (key) {
          element.textContent = t(key);
        }
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    window.passwordModal = new PasswordModal();
  });
</script>