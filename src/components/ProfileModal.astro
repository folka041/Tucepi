---
---

<div id="profileModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
  <div class="bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto transform transition-all">
    <div class="p-6 sm:p-8">
      <!-- Header -->
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-2xl font-bold text-gray-900" data-key="editProfile">Edit Profile</h2>
        <button id="closeProfileModal" class="text-gray-400 hover:text-gray-600 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Profile Form -->
      <form id="profileForm" class="space-y-4">
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="profileFirstName" class="block text-sm font-medium text-gray-700 mb-2" data-key="firstName">First Name</label>
            <input
              type="text"
              id="profileFirstName"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="John"
            />
          </div>
          <div>
            <label for="profileLastName" class="block text-sm font-medium text-gray-700 mb-2" data-key="lastName">Last Name</label>
            <input
              type="text"
              id="profileLastName"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="Doe"
            />
          </div>
        </div>
        
        <div>
          <label for="profileEmail" class="block text-sm font-medium text-gray-700 mb-2" data-key="emailAddress">Email</label>
          <input
            type="email"
            id="profileEmail"
            disabled
            class="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500 cursor-not-allowed"
            placeholder="your@email.com"
          />
          <p class="mt-1 text-xs text-gray-500" data-key="emailCannotChange">Email address cannot be changed</p>
        </div>
        
        <div>
          <label for="profilePhone" class="block text-sm font-medium text-gray-700 mb-2" data-key="phoneNumber">Phone Number</label>
          <input
            type="tel"
            id="profilePhone"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
            placeholder="+1 (555) 123-4567"
          />
        </div>
        
        <button
          type="submit"
          class="w-full bg-primary-600 hover:bg-primary-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors duration-200"
          data-key="saveChanges"
        >
          Save Changes
        </button>
      </form>

      <!-- Loading State -->
      <div id="profileLoading" class="hidden text-center py-4">
        <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary-600"></div>
        <p class="mt-2 text-gray-600" data-key="saving">Saving...</p>
      </div>

      <!-- Success Message -->
      <div id="profileSuccess" class="hidden mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <p class="text-green-700 text-sm" data-key="profileUpdated">Profile updated successfully!</p>
        </div>
      </div>

      <!-- Error Message -->
      <div id="profileError" class="hidden mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p class="text-red-700 text-sm"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { supabase } from '../lib/supabase';
  import { t } from '../lib/i18n';

  class ProfileModal {
    constructor() {
      this.modal = document.getElementById('profileModal');
      this.form = document.getElementById('profileForm');
      this.closeButton = document.getElementById('closeProfileModal');
      this.loading = document.getElementById('profileLoading');
      this.success = document.getElementById('profileSuccess');
      this.error = document.getElementById('profileError');
      this.user = null;

      this.init();
      this.updateTranslations();
    }

    init() {
      this.closeButton?.addEventListener('click', () => this.close());
      this.form?.addEventListener('submit', (e) => this.handleSubmit(e));
      
      // Close on backdrop click
      this.modal?.addEventListener('click', (e) => {
        if (e.target === this.modal) this.close();
      });

      // Listen for language changes
      window.addEventListener('languageChanged', () => {
        this.updateTranslations();
      });
    }

    async open(user) {
      this.user = user;
      await this.loadUserData();
      this.modal?.classList.remove('hidden');
      this.modal?.classList.add('flex');
      document.body.style.overflow = 'hidden';
      this.hideMessages();
    }

    close() {
      this.modal?.classList.add('hidden');
      this.modal?.classList.remove('flex');
      document.body.style.overflow = '';
      this.hideMessages();
    }

    async loadUserData() {
      if (!this.user) return;

      try {
        // Load profile data - remove .single() to handle missing profiles gracefully
        const { data: profiles } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', this.user.id);

        const profile = profiles?.[0]; // Get first profile or undefined if none exists

        // Populate form fields
        const fullName = profile?.full_name || this.user.user_metadata?.full_name || '';
        const nameParts = fullName.split(' ');
        const firstName = nameParts[0] || '';
        const lastName = nameParts.slice(1).join(' ') || '';

        document.getElementById('profileFirstName').value = firstName;
        document.getElementById('profileLastName').value = lastName;
        document.getElementById('profileEmail').value = this.user.email || '';
        document.getElementById('profilePhone').value = profile?.phone || this.user.user_metadata?.phone || '';

      } catch (error) {
        console.error('Error loading profile:', error);
        this.showError(t('errorLoadingProfile') || 'Error loading profile data');
      }
    }

    showLoading() {
      this.loading?.classList.remove('hidden');
      this.form?.classList.add('hidden');
    }

    hideLoading() {
      this.loading?.classList.add('hidden');
      this.form?.classList.remove('hidden');
    }

    showSuccess() {
      this.success?.classList.remove('hidden');
    }

    showError(message) {
      const errorElement = this.error?.querySelector('p');
      if (errorElement) {
        errorElement.textContent = message;
        this.error?.classList.remove('hidden');
      }
    }

    hideMessages() {
      this.success?.classList.add('hidden');
      this.error?.classList.add('hidden');
    }

    async handleSubmit(e) {
      e.preventDefault();
      this.showLoading();
      this.hideMessages();

      const firstName = document.getElementById('profileFirstName')?.value;
      const lastName = document.getElementById('profileLastName')?.value;
      const phone = document.getElementById('profilePhone')?.value;
      const fullName = `${firstName} ${lastName}`.trim();

      try {
        // Update profile in database
        const { error: profileError } = await supabase
          .from('profiles')
          .upsert({
            id: this.user.id,
            email: this.user.email,
            full_name: fullName,
            phone: phone,
          });

        if (profileError) throw profileError;

        // Update user metadata
        const { error: userError } = await supabase.auth.updateUser({
          data: {
            first_name: firstName,
            last_name: lastName,
            full_name: fullName,
            phone: phone,
          }
        });

        if (userError) throw userError;

        this.showSuccess();
        
        // Update user menu
        if (window.userMenu) {
          window.userMenu.updateUserInfo({
            ...this.user,
            profile: { full_name: fullName, phone: phone }
          });
        }

        setTimeout(() => {
          this.close();
        }, 2000);

      } catch (error) {
        console.error('Profile update error:', error);
        this.showError(error.message || t('errorUpdatingProfile') || 'Error updating profile');
      } finally {
        this.hideLoading();
      }
    }

    updateTranslations() {
      const elements = document.querySelectorAll('[data-key]');
      elements.forEach(element => {
        const key = element.getAttribute('data-key');
        if (key) {
          element.textContent = t(key);
        }
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    window.profileModal = new ProfileModal();
  });
</script>