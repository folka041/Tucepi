---
---

<div id="bookingModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
  <div class="bg-white rounded-2xl shadow-2xl w-full max-w-2xl mx-auto max-h-[90vh] overflow-y-auto">
    <div class="p-6 sm:p-8">
      <!-- Header -->
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-2xl font-bold text-gray-900" data-key="bookYourStayTitle">Book Your Stay</h2>
        <button id="closeBookingModal" class="text-gray-400 hover:text-gray-600 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Apartment Info -->
      <div id="apartmentInfo" class="mb-6 p-4 bg-gray-50 rounded-lg">
        <div class="flex items-center space-x-4">
          <img id="apartmentImage" src="" alt="" class="w-16 h-16 object-cover rounded-lg">
          <div>
            <h3 id="apartmentName" class="font-semibold text-gray-900"></h3>
            <p id="apartmentPrice" class="text-primary-600 font-medium"></p>
          </div>
        </div>
      </div>

      <!-- Booking Form -->
      <form id="bookingForm" class="space-y-6">
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label for="checkIn" class="block text-sm font-medium text-gray-700 mb-2" data-key="checkinDate">Check-in Date</label>
            <input
              type="date"
              id="checkIn"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
            />
          </div>
          <div>
            <label for="checkOut" class="block text-sm font-medium text-gray-700 mb-2" data-key="checkoutDate">Check-out Date</label>
            <input
              type="date"
              id="checkOut"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
            />
          </div>
        </div>

        <div>
          <label for="guests" class="block text-sm font-medium text-gray-700 mb-2" data-key="numberOfGuests">Number of Guests</label>
          <select
            id="guests"
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
          >
            <option value="" data-key="selectGuests">Select number of guests</option>
            <option value="1">1 Guest</option>
            <option value="2">2 Guests</option>
            <option value="3">3 Guests</option>
            <option value="4">4 Guests</option>
            <option value="5">5 Guests</option>
            <option value="6">6 Guests</option>
            <option value="7">7 Guests</option>
            <option value="8">8 Guests</option>
          </select>
        </div>

        <!-- Guest Information -->
        <div class="space-y-4">
          <h4 class="text-lg font-semibold text-gray-900" data-key="guestInformation">Guest Information</h4>
          
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label for="firstName" class="block text-sm font-medium text-gray-700 mb-2">
                <span data-key="firstName">First Name</span> *
              </label>
              <input
                type="text"
                id="firstName"
                required
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
                placeholder="John"
              />
            </div>
            <div>
              <label for="lastName" class="block text-sm font-medium text-gray-700 mb-2">
                <span data-key="lastName">Last Name</span> *
              </label>
              <input
                type="text"
                id="lastName"
                required
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
                placeholder="Doe"
              />
            </div>
          </div>

          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
              <span data-key="emailAddress">Email Address</span> *
            </label>
            <input
              type="email"
              id="email"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="john@example.com"
            />
          </div>

          <div>
            <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">
              <span data-key="phoneNumber">Phone Number</span> *
            </label>
            <input
              type="tel"
              id="phone"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="+1 (555) 123-4567"
            />
          </div>
        </div>

        <div>
          <label for="specialRequests" class="block text-sm font-medium text-gray-700 mb-2">
            <span data-key="specialRequests">Special Requests</span> (<span data-key="optional">Optional</span>)
          </label>
          <textarea
            id="specialRequests"
            rows="3"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors resize-vertical"
            data-key="specialRequestsPlaceholder"
            placeholder="Any special requests or requirements..."
          ></textarea>
        </div>

        <!-- Terms and Conditions with Enhanced Visibility -->
        <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
          <h4 class="text-sm font-semibold text-gray-900 mb-3" data-key="termsAndConditions">Terms & Conditions</h4>
          
          <!-- Enhanced Checkbox Design -->
          <div class="space-y-3">
            <label class="flex items-start space-x-3 cursor-pointer group">
              <div class="relative flex-shrink-0 mt-0.5">
                <input
                  type="checkbox"
                  id="agreeTerms"
                  required
                  class="sr-only peer"
                />
                <div class="w-5 h-5 border-2 border-gray-300 rounded bg-white peer-checked:bg-primary-600 peer-checked:border-primary-600 peer-focus:ring-2 peer-focus:ring-primary-500 peer-focus:ring-offset-2 transition-all duration-200 group-hover:border-primary-400">
                  <svg class="w-3 h-3 text-white absolute top-0.5 left-0.5 opacity-0 peer-checked:opacity-100 transition-opacity duration-200" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                  </svg>
                </div>
              </div>
              <span class="text-sm text-gray-700 leading-relaxed">
                <span data-key="agreeTermsText">I agree to the</span> 
                <a href="/terms" target="_blank" class="text-primary-600 hover:text-primary-700 underline font-medium" data-key="termsOfService">Terms of Service</a> 
                <span data-key="and">and</span> 
                <a href="/privacy" target="_blank" class="text-primary-600 hover:text-primary-700 underline font-medium" data-key="privacyPolicy">Privacy Policy</a>
              </span>
            </label>

            <label class="flex items-start space-x-3 cursor-pointer group">
              <div class="relative flex-shrink-0 mt-0.5">
                <input
                  type="checkbox"
                  id="agreeMarketing"
                  class="sr-only peer"
                />
                <div class="w-5 h-5 border-2 border-gray-300 rounded bg-white peer-checked:bg-primary-600 peer-checked:border-primary-600 peer-focus:ring-2 peer-focus:ring-primary-500 peer-focus:ring-offset-2 transition-all duration-200 group-hover:border-primary-400">
                  <svg class="w-3 h-3 text-white absolute top-0.5 left-0.5 opacity-0 peer-checked:opacity-100 transition-opacity duration-200" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                  </svg>
                </div>
              </div>
              <span class="text-sm text-gray-700 leading-relaxed">
                <span data-key="marketingOptIn">I would like to receive special offers and updates via email</span>
                <span class="text-gray-500 ml-1">(<span data-key="optional">Optional</span>)</span>
              </span>
            </label>

            <label class="flex items-start space-x-3 cursor-pointer group">
              <div class="relative flex-shrink-0 mt-0.5">
                <input
                  type="checkbox"
                  id="confirmDetails"
                  required
                  class="sr-only peer"
                />
                <div class="w-5 h-5 border-2 border-gray-300 rounded bg-white peer-checked:bg-primary-600 peer-checked:border-primary-600 peer-focus:ring-2 peer-focus:ring-primary-500 peer-focus:ring-offset-2 transition-all duration-200 group-hover:border-primary-400">
                  <svg class="w-3 h-3 text-white absolute top-0.5 left-0.5 opacity-0 peer-checked:opacity-100 transition-opacity duration-200" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                  </svg>
                </div>
              </div>
              <span class="text-sm text-gray-700 leading-relaxed">
                <span data-key="confirmDetailsText">I confirm that all the information provided is accurate and complete</span>
              </span>
            </label>
          </div>

          <!-- Important Notice -->
          <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <div class="flex items-start space-x-2">
              <svg class="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <div class="text-sm text-blue-800">
                <p class="font-medium mb-1" data-key="importantNotice">Important Notice</p>
                <p data-key="cancellationPolicy">Free cancellation up to 48 hours before check-in. Cancellations within 48 hours are subject to a one-night charge.</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Booking Summary -->
        <div class="bg-primary-50 rounded-lg p-4">
          <h4 class="font-semibold text-gray-900 mb-3" data-key="bookingSummary">Booking Summary</h4>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span class="text-gray-600" data-key="nights">Nights:</span>
              <span id="totalNights" class="font-medium">0</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600" data-key="ratePerNight">Rate per night:</span>
              <span id="ratePerNight" class="font-medium">$0</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600" data-key="subtotal">Subtotal:</span>
              <span id="subtotal" class="font-medium">$0</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600" data-key="taxesFees">Taxes & Fees:</span>
              <span id="taxes" class="font-medium">$0</span>
            </div>
            <hr class="my-2">
            <div class="flex justify-between text-lg font-semibold">
              <span data-key="total">Total:</span>
              <span id="totalPrice" class="text-primary-600">$0</span>
            </div>
          </div>
        </div>

        <button
          type="submit"
          class="w-full bg-primary-600 hover:bg-primary-700 text-white py-4 px-6 rounded-lg font-semibold transition-colors duration-200 transform hover:scale-105"
          data-key="confirmBooking"
        >
          Confirm Booking
        </button>
      </form>

      <!-- Loading State -->
      <div id="bookingLoading" class="hidden text-center py-8">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
        <p class="mt-4 text-gray-600" data-key="loading">Processing your booking...</p>
      </div>

      <!-- Success Message -->
      <div id="bookingSuccess" class="hidden text-center py-8">
        <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2" data-key="bookingConfirmed">Booking Confirmed!</h3>
        <p class="text-gray-600 mb-4" data-key="bookingConfirmedMessage">Thank you for your reservation. We'll contact you shortly with confirmation details.</p>
        <button
          onclick="window.bookingModal?.close()"
          class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-2 rounded-lg font-medium transition-colors"
          data-key="close"
        >
          Close
        </button>
      </div>

      <!-- Error Message -->
      <div id="bookingError" class="hidden mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
        <p class="text-red-700 text-sm"></p>
      </div>
    </div>
  </div>
</div>

<script>
  import { t } from '../lib/i18n';
  import { supabase } from '../lib/supabase';

  class BookingModal {
    constructor() {
      this.modal = document.getElementById('bookingModal');
      this.form = document.getElementById('bookingForm');
      this.closeButton = document.getElementById('closeBookingModal');
      this.loading = document.getElementById('bookingLoading');
      this.success = document.getElementById('bookingSuccess');
      this.error = document.getElementById('bookingError');
      this.currentApartment = null;

      // Store DOM element references with null checks
      this.apartmentImage = document.getElementById('apartmentImage');
      this.apartmentName = document.getElementById('apartmentName');
      this.apartmentPrice = document.getElementById('apartmentPrice');
      this.ratePerNight = document.getElementById('ratePerNight');

      this.init();
      this.updateTranslations();
    }

    init() {
      this.closeButton?.addEventListener('click', () => this.close());
      this.form?.addEventListener('submit', (e) => this.handleBooking(e));
      
      // Date change listeners for price calculation
      document.getElementById('checkIn')?.addEventListener('change', () => this.calculatePrice());
      document.getElementById('checkOut')?.addEventListener('change', () => this.calculatePrice());
      
      // Close on backdrop click
      this.modal?.addEventListener('click', (e) => {
        if (e.target === this.modal) this.close();
      });

      // Set minimum date to today
      const today = new Date().toISOString().split('T')[0];
      const checkInInput = document.getElementById('checkIn');
      const checkOutInput = document.getElementById('checkOut');
      
      if (checkInInput) checkInInput.min = today;
      if (checkOutInput) checkOutInput.min = today;

      // Update checkout min date when checkin changes
      checkInInput?.addEventListener('change', (e) => {
        if (checkOutInput) {
          checkOutInput.min = e.target.value;
          if (checkOutInput.value && checkOutInput.value <= e.target.value) {
            checkOutInput.value = '';
          }
        }
      });

      // Listen for calendar date selection
      window.addEventListener('datesSelected', (e) => {
        const { checkin, checkout } = e.detail;
        if (checkin && checkout) {
          const checkinInput = document.getElementById('checkIn');
          const checkoutInput = document.getElementById('checkOut');
          if (checkinInput) checkinInput.value = checkin.toISOString().split('T')[0];
          if (checkoutInput) checkoutInput.value = checkout.toISOString().split('T')[0];
          this.calculatePrice();
        }
      });

      // Listen for language changes
      window.addEventListener('languageChanged', () => {
        this.updateTranslations();
      });

      // Enhanced checkbox validation
      this.setupCheckboxValidation();
    }

    setupCheckboxValidation() {
      const form = this.form;
      if (!form) return;

      form.addEventListener('submit', (e) => {
        const agreeTerms = document.getElementById('agreeTerms');
        const confirmDetails = document.getElementById('confirmDetails');

        if (!agreeTerms?.checked) {
          e.preventDefault();
          this.showError(t('mustAgreeTerms') || 'You must agree to the Terms of Service and Privacy Policy to continue.');
          this.highlightCheckbox(agreeTerms);
          return false;
        }

        if (!confirmDetails?.checked) {
          e.preventDefault();
          this.showError(t('mustConfirmDetails') || 'You must confirm that all information provided is accurate.');
          this.highlightCheckbox(confirmDetails);
          return false;
        }
      });
    }

    highlightCheckbox(checkbox) {
      if (!checkbox) return;
      
      const checkboxContainer = checkbox.closest('label');
      if (checkboxContainer) {
        checkboxContainer.classList.add('ring-2', 'ring-red-500', 'ring-offset-2');
        setTimeout(() => {
          checkboxContainer.classList.remove('ring-2', 'ring-red-500', 'ring-offset-2');
        }, 3000);
      }
    }

    open(apartment) {
      this.currentApartment = apartment;
      this.populateApartmentInfo(apartment);
      this.updateGuestOptions(apartment);
      this.modal?.classList.remove('hidden');
      this.modal?.classList.add('flex');
      document.body.style.overflow = 'hidden';
      
      // Reset form state
      this.showForm();
      this.hideError();
      
      // Pre-fill dates from calendar if available
      if (window.calendar) {
        const selectedDates = window.calendar.getSelectedDates();
        if (selectedDates.checkin) {
          const checkinInput = document.getElementById('checkIn');
          if (checkinInput) {
            checkinInput.value = selectedDates.checkin.toISOString().split('T')[0];
          }
        }
        if (selectedDates.checkout) {
          const checkoutInput = document.getElementById('checkOut');
          if (checkoutInput) {
            checkoutInput.value = selectedDates.checkout.toISOString().split('T')[0];
          }
        }
        if (selectedDates.checkin && selectedDates.checkout) {
          this.calculatePrice();
        }
      }
    }

    close() {
      this.modal?.classList.add('hidden');
      this.modal?.classList.remove('flex');
      document.body.style.overflow = '';
      this.hideError();
      this.form?.reset();
      this.resetPriceCalculation();
    }

    populateApartmentInfo(apartment) {
      // Use stored element references with null checks
      if (this.apartmentImage && apartment.images && apartment.images[0]) {
        this.apartmentImage.src = apartment.images[0];
        this.apartmentImage.alt = apartment.name || '';
      }
      
      if (this.apartmentName && apartment.name) {
        this.apartmentName.textContent = apartment.name;
      }
      
      if (this.apartmentPrice && apartment.price) {
        this.apartmentPrice.textContent = `${apartment.price}/${t('night')}`;
      }
      
      if (this.ratePerNight && apartment.price) {
        this.ratePerNight.textContent = apartment.price;
      }
    }

    updateGuestOptions(apartment) {
      const guestsSelect = document.getElementById('guests');
      if (!guestsSelect || !apartment) return;

      const maxGuests = apartment.guests || 8;
      
      // Clear existing options except the first one (placeholder)
      const placeholder = guestsSelect.querySelector('option[value=""]');
      guestsSelect.innerHTML = '';
      if (placeholder) {
        guestsSelect.appendChild(placeholder);
      }

      // Add guest options up to the apartment's maximum
      for (let i = 1; i <= maxGuests; i++) {
        const option = document.createElement('option');
        option.value = i.toString();
        option.textContent = i === 1 ? `1 ${t('guest')}` : `${i} ${t('guests')}`;
        guestsSelect.appendChild(option);
      }
    }

    calculatePrice() {
      const checkIn = document.getElementById('checkIn')?.value;
      const checkOut = document.getElementById('checkOut')?.value;
      
      if (checkIn && checkOut && this.currentApartment) {
        const startDate = new Date(checkIn);
        const endDate = new Date(checkOut);
        const nights = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
        
        if (nights > 0) {
          const pricePerNight = parseInt(this.currentApartment.price.replace('$', ''));
          const subtotal = nights * pricePerNight;
          const taxes = Math.round(subtotal * 0.12); // 12% taxes
          const total = subtotal + taxes;
          
          const totalNightsEl = document.getElementById('totalNights');
          const subtotalEl = document.getElementById('subtotal');
          const taxesEl = document.getElementById('taxes');
          const totalPriceEl = document.getElementById('totalPrice');
          
          if (totalNightsEl) totalNightsEl.textContent = nights.toString();
          if (subtotalEl) subtotalEl.textContent = `$${subtotal}`;
          if (taxesEl) taxesEl.textContent = `$${taxes}`;
          if (totalPriceEl) totalPriceEl.textContent = `$${total}`;
        } else {
          this.resetPriceCalculation();
        }
      } else {
        this.resetPriceCalculation();
      }
    }

    resetPriceCalculation() {
      const totalNightsEl = document.getElementById('totalNights');
      const subtotalEl = document.getElementById('subtotal');
      const taxesEl = document.getElementById('taxes');
      const totalPriceEl = document.getElementById('totalPrice');
      
      if (totalNightsEl) totalNightsEl.textContent = '0';
      if (subtotalEl) subtotalEl.textContent = '$0';
      if (taxesEl) taxesEl.textContent = '$0';
      if (totalPriceEl) totalPriceEl.textContent = '$0';
    }

    showForm() {
      this.form?.classList.remove('hidden');
      this.loading?.classList.add('hidden');
      this.success?.classList.add('hidden');
    }

    showLoading() {
      this.loading?.classList.remove('hidden');
      this.form?.classList.add('hidden');
      this.success?.classList.add('hidden');
    }

    showSuccess() {
      this.success?.classList.remove('hidden');
      this.form?.classList.add('hidden');
      this.loading?.classList.add('hidden');
    }

    showError(message) {
      const errorElement = this.error?.querySelector('p');
      if (errorElement) {
        errorElement.textContent = message;
        this.error?.classList.remove('hidden');
      }
    }

    hideError() {
      this.error?.classList.add('hidden');
    }

    updateTranslations() {
      const elements = document.querySelectorAll('[data-key]');
      elements.forEach(element => {
        const key = element.getAttribute('data-key');
        if (key) {
          if (element.tagName === 'INPUT' && element.type !== 'submit' && element.type !== 'button') {
            // Don't translate input placeholders for booking form
            return;
          } else if (element.tagName === 'TEXTAREA') {
            element.placeholder = t(key);
          } else if (element.tagName === 'OPTION') {
            // Handle option elements specially for guest selection
            const originalText = element.textContent;
            if (originalText && originalText.includes('Select')) {
              element.textContent = t(key);
            } else if (originalText && (originalText.includes('Guest') || originalText.includes('Guests'))) {
              // Keep the number but translate the word
              const number = originalText.match(/\d+/)?.[0] || '';
              const guestWord = number === '1' ? t('guest') : t('guests');
              element.textContent = `${number} ${guestWord}`;
            }
          } else {
            element.textContent = t(key);
          }
        }
      });

      // Update apartment price display if modal is open
      if (this.currentApartment && !this.modal?.classList.contains('hidden') && this.apartmentPrice) {
        this.apartmentPrice.textContent = `${this.currentApartment.price}/${t('night')}`;
      }
    }

    async handleBooking(e) {
      e.preventDefault();
      
      this.showLoading();
      this.hideError();

      // Get form data
      const checkIn = document.getElementById('checkIn')?.value;
      const checkOut = document.getElementById('checkOut')?.value;
      const guestsValue = document.getElementById('guests')?.value;
      const guests = guestsValue ? parseInt(guestsValue) : 0;
      const firstName = document.getElementById('firstName')?.value;
      const lastName = document.getElementById('lastName')?.value;
      const email = document.getElementById('email')?.value;
      const phone = document.getElementById('phone')?.value;
      const specialRequests = document.getElementById('specialRequests')?.value;
      
      // Validate required fields
      if (!checkIn || !checkOut) {
        this.showError(t('pleaseSelectDates') || 'Please select valid check-in and check-out dates.');
        this.showForm();
        return;
      }

      if (!guests || guests === 0) {
        this.showError(t('pleaseSelectGuests') || 'Please select the number of guests.');
        this.showForm();
        return;
      }

      if (!firstName || !lastName || !email || !phone) {
        this.showError(t('pleaseCompleteForm') || 'Please complete all required fields.');
        this.showForm();
        return;
      }

      // Validate dates
      const startDate = new Date(checkIn);
      const endDate = new Date(checkOut);
      const nights = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
      
      if (nights <= 0) {
        this.showError(t('pleaseSelectDates') || 'Please select valid check-in and check-out dates.');
        this.showForm();
        return;
      }

      // Validate guest count against apartment capacity
      if (this.currentApartment && guests > this.currentApartment.guests) {
        this.showError(t('maximumGuestsExceeded') || `Maximum ${this.currentApartment.guests} guests allowed for this apartment.`);
        this.showForm();
        return;
      }

      // Calculate total price
      const pricePerNight = parseInt(this.currentApartment.price.replace('$', ''));
      const subtotal = nights * pricePerNight;
      const taxes = Math.round(subtotal * 0.12);
      const totalPrice = subtotal + taxes;

      try {
        // Check if user is authenticated
        const { data: { user } } = await supabase.auth.getUser();
        
        if (user) {
          // For authenticated users, save to Supabase
          console.log('Saving booking for authenticated user:', user.id);
          
          // First, ensure user profile exists
          const { data: existingProfile } = await supabase
            .from('profiles')
            .select('id')
            .eq('id', user.id)
            .single();

          if (!existingProfile) {
            // Create profile if it doesn't exist
            const { error: profileError } = await supabase
              .from('profiles')
              .insert({
                id: user.id,
                email: email,
                full_name: `${firstName} ${lastName}`,
                phone: phone
              });

            if (profileError) {
              console.error('Profile creation error:', profileError);
              // Continue with booking even if profile creation fails
            }
          }

          // Create the booking
          const bookingData = {
            user_id: user.id,
            apartment_id: this.currentApartment.id,
            check_in: checkIn,
            check_out: checkOut,
            guests: guests,
            total_price: totalPrice,
            status: 'confirmed'
          };

          console.log('Booking data to insert:', bookingData);

          const { data: bookingResult, error: bookingError } = await supabase
            .from('bookings')
            .insert(bookingData)
            .select()
            .single();

          if (bookingError) {
            console.error('Booking error:', bookingError);
            throw bookingError;
          }

          console.log('Booking created successfully:', bookingResult);
        } else {
          // For non-authenticated users, create a guest booking record
          console.log('Creating guest booking');
          
          const guestBookingData = {
            apartment: this.currentApartment,
            checkIn,
            checkOut,
            guests,
            guestInfo: {
              firstName,
              lastName,
              email,
              phone
            },
            specialRequests,
            totalPrice,
            status: 'pending',
            createdAt: new Date().toISOString()
          };

          // Store in localStorage for guest users
          const existingBookings = JSON.parse(localStorage.getItem('guestBookings') || '[]');
          existingBookings.push(guestBookingData);
          localStorage.setItem('guestBookings', JSON.stringify(existingBookings));
          
          console.log('Guest booking saved to localStorage:', guestBookingData);
        }

        // Clear calendar selection
        if (window.calendar) {
          window.calendar.clearSelection();
        }

        // Trigger notification update for admin users
        if (window.notificationSystem) {
          // Force check for new bookings after a short delay
          setTimeout(() => {
            window.notificationSystem.checkForNewBookings();
            window.notificationSystem.checkForNewGuestBookings();
          }, 1000);
        }

        this.showSuccess();
      } catch (error) {
        console.error('Booking error:', error);
        this.showError(error.message || t('bookingError') || 'There was an error processing your booking. Please try again.');
        this.showForm();
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    window.bookingModal = new BookingModal();
  });
</script>