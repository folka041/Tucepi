---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<Layout 
  title="Reset Password - Apartments Delfin" 
  description="Reset your password for Apartments Delfin account"
  keywords="reset password, account recovery, Delfin apartments"
>
  <Header />
  
  <main class="pt-16 min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div class="text-center">
        <h2 class="mt-6 text-3xl font-bold text-gray-900" data-key="resetPassword">Reset Password</h2>
        <p class="mt-2 text-sm text-gray-600" data-key="resetPasswordDesc">
          Enter your new password below
        </p>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-8">
        <form id="resetPasswordForm" class="space-y-6">
          <div>
            <label for="newPassword" class="block text-sm font-medium text-gray-700 mb-2" data-key="newPassword">New Password</label>
            <div class="relative">
              <input
                type="password"
                id="newPassword"
                required
                minlength="6"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors pr-12"
                placeholder="••••••••"
              />
              <button
                type="button"
                id="toggleNewPassword"
                class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </button>
            </div>
            <div class="mt-1">
              <div id="passwordStrength" class="text-xs text-gray-500">
                <span data-key="passwordRequirements">Password must be at least 6 characters</span>
              </div>
            </div>
          </div>
          
          <div>
            <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-2" data-key="confirmPassword">Confirm Password</label>
            <div class="relative">
              <input
                type="password"
                id="confirmPassword"
                required
                minlength="6"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors pr-12"
                placeholder="••••••••"
              />
              <button
                type="button"
                id="toggleConfirmPassword"
                class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <button
            type="submit"
            class="w-full bg-primary-600 hover:bg-primary-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors duration-200"
            data-key="updatePassword"
          >
            Update Password
          </button>
        </form>

        <!-- Loading State -->
        <div id="loading" class="hidden text-center py-8">
          <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
          <p class="mt-4 text-gray-600" data-key="updating">Updating password...</p>
        </div>

        <!-- Success Message -->
        <div id="success" class="hidden text-center py-8">
          <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-2" data-key="passwordUpdated">Password Updated!</h3>
          <p class="text-gray-600 mb-4" data-key="passwordUpdatedDesc">Your password has been successfully updated.</p>
          <a
            href="/"
            class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
            data-key="backToHome"
          >
            Back to Home
          </a>
        </div>

        <!-- Error Message -->
        <div id="error" class="hidden mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <p class="text-red-700 text-sm"></p>
          </div>
        </div>
      </div>
    </div>
  </main>
  
  <Footer />
</Layout>

<script>
  import { supabase } from '../lib/supabase';
  import { t } from '../lib/i18n';

  class ResetPassword {
    constructor() {
      this.form = document.getElementById('resetPasswordForm');
      this.loading = document.getElementById('loading');
      this.success = document.getElementById('success');
      this.error = document.getElementById('error');
      
      this.init();
      this.updateTranslations();
    }

    init() {
      // Check for access token in URL
      const urlParams = new URLSearchParams(window.location.search);
      const accessToken = urlParams.get('access_token');
      const refreshToken = urlParams.get('refresh_token');
      
      if (!accessToken) {
        this.showError(t('invalidResetLink') || 'Invalid or expired reset link');
        return;
      }

      // Set the session with the tokens
      supabase.auth.setSession({
        access_token: accessToken,
        refresh_token: refreshToken
      });

      this.form?.addEventListener('submit', (e) => this.handleSubmit(e));
      
      // Password visibility toggles
      this.setupPasswordToggle('toggleNewPassword', 'newPassword');
      this.setupPasswordToggle('toggleConfirmPassword', 'confirmPassword');
      
      // Password validation
      document.getElementById('newPassword')?.addEventListener('input', (e) => this.validatePassword(e.target.value));
      document.getElementById('confirmPassword')?.addEventListener('input', () => this.validatePasswordMatch());

      // Listen for language changes
      window.addEventListener('languageChanged', () => {
        this.updateTranslations();
      });
    }

    setupPasswordToggle(buttonId, inputId) {
      const button = document.getElementById(buttonId);
      const input = document.getElementById(inputId);
      
      if (button && input) {
        button.addEventListener('click', () => {
          const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
          input.setAttribute('type', type);
          
          // Update icon
          const icon = button.querySelector('svg');
          if (type === 'text') {
            icon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
            `;
          } else {
            icon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            `;
          }
        });
      }
    }

    validatePassword(password) {
      const strengthElement = document.getElementById('passwordStrength');
      if (!strengthElement) return;

      let strength = 0;
      let feedback = [];

      if (password.length >= 6) strength++;
      else feedback.push(t('passwordLength') || 'At least 6 characters');

      if (/[A-Z]/.test(password)) strength++;
      else feedback.push(t('passwordUppercase') || 'One uppercase letter');

      if (/[a-z]/.test(password)) strength++;
      else feedback.push(t('passwordLowercase') || 'One lowercase letter');

      if (/\d/.test(password)) strength++;
      else feedback.push(t('passwordNumber') || 'One number');

      if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength++;
      else feedback.push(t('passwordSpecial') || 'One special character');

      const colors = ['text-red-500', 'text-orange-500', 'text-yellow-500', 'text-blue-500', 'text-green-500'];
      const labels = [t('veryWeak') || 'Very Weak', t('weak') || 'Weak', t('fair') || 'Fair', t('good') || 'Good', t('strong') || 'Strong'];

      strengthElement.className = `text-xs ${colors[Math.min(strength, 4)]}`;
      
      if (password.length === 0) {
        strengthElement.textContent = t('passwordRequirements') || 'Password must be at least 6 characters';
        strengthElement.className = 'text-xs text-gray-500';
      } else if (feedback.length > 0) {
        strengthElement.textContent = `${labels[strength]} - ${t('missing') || 'Missing'}: ${feedback.join(', ')}`;
      } else {
        strengthElement.textContent = `${labels[strength]} ${t('password') || 'password'}`;
      }
    }

    validatePasswordMatch() {
      const newPassword = document.getElementById('newPassword')?.value;
      const confirmPassword = document.getElementById('confirmPassword')?.value;
      const confirmInput = document.getElementById('confirmPassword');

      if (confirmPassword && newPassword !== confirmPassword) {
        confirmInput?.setCustomValidity(t('passwordsDoNotMatch') || 'Passwords do not match');
        confirmInput?.classList.add('border-red-500');
      } else {
        confirmInput?.setCustomValidity('');
        confirmInput?.classList.remove('border-red-500');
      }
    }

    showLoading() {
      this.loading?.classList.remove('hidden');
      this.form?.classList.add('hidden');
    }

    hideLoading() {
      this.loading?.classList.add('hidden');
      this.form?.classList.remove('hidden');
    }

    showSuccess() {
      this.success?.classList.remove('hidden');
      this.form?.classList.add('hidden');
      this.loading?.classList.add('hidden');
    }

    showError(message) {
      const errorElement = this.error?.querySelector('p');
      if (errorElement) {
        errorElement.textContent = message;
        this.error?.classList.remove('hidden');
      }
    }

    hideError() {
      this.error?.classList.add('hidden');
    }

    async handleSubmit(e) {
      e.preventDefault();
      this.showLoading();
      this.hideError();

      const newPassword = document.getElementById('newPassword')?.value;
      const confirmPassword = document.getElementById('confirmPassword')?.value;

      // Validate passwords match
      if (newPassword !== confirmPassword) {
        this.showError(t('passwordsDoNotMatch') || 'Passwords do not match');
        this.hideLoading();
        return;
      }

      try {
        const { error } = await supabase.auth.updateUser({
          password: newPassword
        });

        if (error) throw error;

        this.showSuccess();

      } catch (error) {
        console.error('Password reset error:', error);
        this.showError(error.message || t('errorUpdatingPassword') || 'Error updating password');
        this.hideLoading();
      }
    }

    updateTranslations() {
      const elements = document.querySelectorAll('[data-key]');
      elements.forEach(element => {
        const key = element.getAttribute('data-key');
        if (key) {
          element.textContent = t(key);
        }
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new ResetPassword();
  });
</script>