---
import Layout from '../../layouts/Layout.astro';
---

<Layout 
  title="Email Confirmation - Apartments Delfin" 
  description="Confirming your email address"
  keywords="email confirmation, account verification, Delfin apartments"
>
  <div class="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div class="text-center">
        <h2 class="mt-6 text-3xl font-bold text-gray-900" data-key="emailConfirmation">Email Confirmation</h2>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-8">
        <!-- Loading State -->
        <div id="loadingState" class="text-center py-8">
          <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
          <p class="mt-4 text-gray-600" data-key="confirmingEmail">Confirming your email...</p>
        </div>

        <!-- Success State -->
        <div id="successState" class="hidden text-center py-8">
          <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-2" data-key="emailConfirmed">Email Confirmed!</h3>
          <p class="text-gray-600 mb-6" data-key="emailConfirmedDesc">Your email has been successfully confirmed. You can now sign in to your account.</p>
          <a
            href="/"
            class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
            data-key="continueToSite"
          >
            Continue to Site
          </a>
        </div>

        <!-- Error State -->
        <div id="errorState" class="hidden text-center py-8">
          <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-2" data-key="confirmationFailed">Confirmation Failed</h3>
          <p id="errorMessage" class="text-gray-600 mb-6" data-key="confirmationFailedDesc">There was an error confirming your email. The link may be invalid or expired.</p>
          <div class="space-y-3">
            <a
              href="/"
              class="block bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
              data-key="backToHome"
            >
              Back to Home
            </a>
            <button
              onclick="window.authModal?.open('signUp')"
              class="block w-full text-primary-600 hover:text-primary-700 px-6 py-2 font-medium transition-colors"
              data-key="tryAgain"
            >
              Try Again
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../../lib/supabase';
  import { t } from '../../lib/i18n';

  class EmailConfirmation {
    constructor() {
      this.loadingState = document.getElementById('loadingState');
      this.successState = document.getElementById('successState');
      this.errorState = document.getElementById('errorState');
      this.errorMessage = document.getElementById('errorMessage');
      
      this.init();
      this.updateTranslations();
    }

    async init() {
      try {
        // Get URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const accessToken = urlParams.get('access_token');
        const refreshToken = urlParams.get('refresh_token');
        const type = urlParams.get('type');
        const error = urlParams.get('error');
        const errorDescription = urlParams.get('error_description');

        // Check for errors in URL
        if (error) {
          throw new Error(errorDescription || error);
        }

        // Check if this is an email confirmation
        if (type === 'signup' && accessToken && refreshToken) {
          // Set the session
          const { data, error: sessionError } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken
          });

          if (sessionError) throw sessionError;

          // Create user profile if it doesn't exist
          if (data.user) {
            await this.createUserProfile(data.user);
          }

          this.showSuccess();
        } else {
          throw new Error('Invalid confirmation link');
        }

      } catch (error) {
        console.error('Email confirmation error:', error);
        this.showError(error.message);
      }

      // Listen for language changes
      window.addEventListener('languageChanged', () => {
        this.updateTranslations();
      });
    }

    async createUserProfile(user) {
      try {
        // Check if profile already exists
        const { data: existingProfile } = await supabase
          .from('profiles')
          .select('id')
          .eq('id', user.id)
          .single();

        if (!existingProfile) {
          // Create profile from user metadata
          const fullName = user.user_metadata?.full_name || '';
          const phone = user.user_metadata?.phone || '';

          const { error: profileError } = await supabase
            .from('profiles')
            .insert({
              id: user.id,
              email: user.email,
              full_name: fullName,
              phone: phone,
            });

          if (profileError) {
            console.error('Profile creation error:', profileError);
            // Don't throw error, as email confirmation was successful
          }
        }
      } catch (error) {
        console.error('Error creating user profile:', error);
        // Don't throw error, as email confirmation was successful
      }
    }

    showSuccess() {
      this.loadingState?.classList.add('hidden');
      this.successState?.classList.remove('hidden');
      this.errorState?.classList.add('hidden');
    }

    showError(message) {
      this.loadingState?.classList.add('hidden');
      this.successState?.classList.add('hidden');
      this.errorState?.classList.remove('hidden');
      
      if (this.errorMessage) {
        this.errorMessage.textContent = message || t('confirmationFailedDesc');
      }
    }

    updateTranslations() {
      const elements = document.querySelectorAll('[data-key]');
      elements.forEach(element => {
        const key = element.getAttribute('data-key');
        if (key) {
          element.textContent = t(key);
        }
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new EmailConfirmation();
  });
</script>